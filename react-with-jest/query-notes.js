[{"content":"import {render, screen} from \"@testing-library/react\";\r\n\r\nfunction ColorList() {\r\n  return (\r\n    <ul>\r\n      <li>Red</li>\r\n      <li>Blue</li>\r\n      <li>Green</li>\r\n    </ul>\r\n  )\r\n}\r\nrender(<ColorList />)","type":"code","id":"eztrc"},{"content":"test(\"getBy, queryBy, findBy finding 0 elements\", async () => {\r\n  render(<ColorList />)\r\n  expect(() => screen.getByRole(\"textbox\")).toThrow();\r\n  expect(screen.queryByRole(\"textbox\")).toEqual(null);\r\n  let errorThrown = false;\r\n  try {\r\n  await screen.findByRole(\"textbox\")\r\n  } catch(err) {\r\n    errorThrown = true;\r\n  }\r\n  expect(errorThrown).toEqual(true)\r\n})","type":"code","id":"hwsmg"},{"content":"test(\"getBy, queryBy, findBy when they find 0 element\", async () => {\r\n  render(<ColorList />)\r\n\r\n  expect(screen.getByRole(\"list\")).toBeInTheDocument()\r\n  expect(screen.queryByRole(\"list\")).toBeInTheDocument();\r\n  expect(await screen.findByRole(\"list\")).toBeInTheDocument();\r\n\r\n})","type":"code","id":"pyx6f"},{"content":"test(\"getBy, queryBy, findBy when finding >1 elements\", async () => {\r\n  render(<ColorList />)\r\n  expect(() => screen.getByRole(\"listitem\")).toThrow();\r\n  expect(() => screen.queryByRole(\"listitem\")).toThrow();\r\n  let errorThrown = false;\r\n  try {\r\n  await screen.findByRole(\"listitem\")\r\n  } catch(err) {\r\n    errorThrown = true;\r\n  }\r\n  expect(errorThrown).toEqual(true)\r\n})","type":"code","id":"u5gim"},{"content":"test(\"getAllBy, queryAllBy, findAllBy\", async () => {\r\n  render(<ColorList />);\r\n  expect(screen.getAllByRole(\"listitem\")).toHaveLength(3)\r\n  expect(screen.queryAllByRole(\"listitem\")).toHaveLength(3)\r\n  expect(await screen.findAllByRole(\"listitem\")).toHaveLength(3)\r\n})","type":"code","id":"b4sjo"},{"content":"test(\"favour using getBy to prove an element exists\", () => {\r\n  render(<ColorList />)\r\n  const element = screen.getByRole(\"list\");\r\n  expect(element).toBeInTheDocument();\r\n})","type":"code","id":"izbdu"},{"content":"test(\"favour queryBy when proving an element does not exist\", () => {\r\n  render(<ColorList />)\r\nconst element = screen.queryByRole(\"textbox\");\r\nexpect(element).not.toBeInTheDocument();\r\n})","type":"code","id":"0wmvg"},{"content":"import {useState, useEffect} from \"react\";\r\n\r\nfunction fakeFetchColors() {\r\n  return Promise.resolve(['red', 'green', 'blue'])\r\n}\r\n\r\nfunction LoadableColorList() {\r\n  const [colors, setColors] = useState([])\r\n\r\n  useEffect(() => {\r\n    fakeFetchColors().then(c => setColors(c))\r\n  }, [])\r\n\r\n  const renderedColors = colors.map(color => (\r\n    <li key={color}>{color}</li>\r\n  ))\r\n\r\n  return (\r\n    <ul>{renderedColors}</ul>\r\n  )\r\n}\r\n\r\nrender(<LoadableColorList />)","type":"code","id":"1b6c9"},{"content":"test(\"favor findBy or FindByAll when data fetching\", async () => {\r\n  render(<LoadableColorList />)\r\n  const els = await screen.findAllByRole('listitem');\r\n  expect(els).toHaveLength(3)\r\n})","type":"code","id":"37i01"}]